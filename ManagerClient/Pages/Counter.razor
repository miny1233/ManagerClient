@page "/counter"
@using AntDesign

<PageTitle>订单管理</PageTitle>

<h1>订单管理</h1>

@if (orders == null)
{
    <p><em>加载中...</em></p>
}
else if (orders.Count == 0)
{
    <p>没有找到订单。</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>订单ID</th>
                <th>用户</th>
                <th>书籍名称</th>
                <th>书籍类型</th>
                <th>价格</th>
                <th>状态</th>
                <th>订单日期</th>
                <th>地址</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.UserName</td>
                    <td>@order.BookName</td>
                    <td>@order.Title</td>
                    <td>@order.Price</td>
                    <td>@order.Status</td>
                    <td>@order.OrderDateTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@order.ShoppingAddress</td>
                    <td>
                        <Button Type="@ButtonType.Primary" Size="@ButtonSize.Large" Disabled=@buttonShowable(@order.Status) @onclick="() => Dispatch(order.OrderId)">发货</Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@using ManagerClient.Data;
@inject BookService bookService

@code {
    private List<Order> orders;
    
    public async Task flushData()
    {
        orders = await bookService.GetOrdersAsync();
        StateHasChanged(); // 异步不做会出现不刷新页面
    }

    public bool buttonShowable(string Status)
    {
        return Status != "待发货";
    }

    public void Dispatch(int id)
    {
        bookService.OrderDispatch(id);
        flushData();
    }

    protected override async Task OnInitializedAsync()
    {
        await flushData();
    }
}